# src/streamlit_app/paginas/analise_desempenho.py

import streamlit as st
import pandas as pd
import json
import plotly.express as px
import os
import statistics

# --- Configura√ß√£o da P√°gina ---
st.set_page_config(layout="wide", page_title="An√°lise de Desempenho")
st.title("üî¨ An√°lise de Desempenho Comparativo dos Bancos NoSQL")
st.markdown("""
Esta p√°gina apresenta os resultados consolidados dos testes de performance executados nos quatro bancos de dados. 
Cada cen√°rio de teste avalia uma carga de trabalho diferente, revelando os pontos fortes e fracos de cada arquitetura.
""")
st.markdown("---")

# --- Fun√ß√£o Auxiliar para Carregar e Processar os Dados ---
def carregar_e_processar_resultados(filepath):
    if not os.path.exists(filepath):
        st.warning(f"Arquivo de resultados n√£o encontrado: {filepath}")
        return None, None

    try:
        with open(filepath, 'r') as f:
            dados = json.load(f)
        
        # Desconsidera a primeira execu√ß√£o (warm-up) para uma m√©dia mais est√°vel
        medias = {banco: statistics.mean(tempos[1:]) for banco, tempos in dados.items() if len(tempos) > 1}
        
        df = pd.DataFrame(list(medias.items()), columns=['Banco', 'Tempo M√©dio (s)'])
        df['Banco'] = df['Banco'].str.capitalize()
        df = df.sort_values(by='Tempo M√©dio (s)', ascending=True)
        
        return df, dados
    except Exception as e:
        st.error(f"Erro ao processar o arquivo {filepath}: {e}")
        return None, None

def plotar_grafico(df, titulo):
    if df is not None:
        fig = px.bar(
            df,
            x='Banco',
            y='Tempo M√©dio (s)',
            title=titulo,
            labels={'Banco': 'Banco de Dados', 'Tempo M√©dio (s)': 'Tempo M√©dio (s)'},
            text_auto='.4f',
            color='Banco',
            color_discrete_map={
                'Redis': '#D82C20', 'Mongo': '#4E9D44', 
                'Neo4j': '#008CC1', 'Cassandra': '#1D3A54'
            }
        )
        fig.update_traces(textposition='outside')
        st.plotly_chart(fig, use_container_width=True)

# --- Layout dos Testes ---
testes = {
    "Inser√ß√£o em Lote": {
        "filepath": "testes/resultados_insercao.json",
        "descricao": "Carga inicial de ~1800 registros (filmes, atores, elenco). Mede a performance de escrita massiva.",
        "analise": {
            "üèÜ Vencedor: Redis (Execu√ß√£o Pura)": "Com o pipeline otimizado, o tempo de execu√ß√£o no servidor Redis √© de meros **~40ms**. A maior parte do tempo total (~0.43s) √© gasta no preparo dos dados em Python, provando que a otimiza√ß√£o do cliente √© crucial.",
            "ü•à MongoDB (~0.18s)": "Performance de escrita muito r√°pida e consistente, sendo uma excelente op√ß√£o para cargas de trabalho mistas.",
            "ü•â Neo4j (~0.21s)": "√ìtima performance, mesmo com a complexidade de criar n√≥s e milhares de relacionamentos, demonstrando a efici√™ncia de seu motor transacional para dados conectados.",
            "üèÖ Cassandra (~1.87s)": "O mais lento para escritas em n√≥ √∫nico, um comportamento esperado de sua arquitetura que prioriza a escalabilidade e a resili√™ncia em detrimento da lat√™ncia de escrita."
        }
    },
    "Busca Avan√ßada": {
        "filepath": "testes/resultados_busca.json",
        "descricao": "Busca complexa com m√∫ltiplos filtros (tipo, ano, m√∫ltiplos g√™neros, nota). Mede a efici√™ncia dos √≠ndices e motores de consulta.",
        "analise": {
            "üèÜ Vencedor: Neo4j (~0.014s)": "Imbat√≠vel. Uma vez que o plano de consulta √© cacheado, sua capacidade de percorrer padr√µes de dados √© superior para leituras complexas.",
            "ü•à MongoDB (~0.05s)": "Extremamente r√°pido e est√°vel, provando o poder de seus √≠ndices secund√°rios para filtrar rapidamente uma grande cole√ß√£o de documentos.",
            "ü•â Cassandra (~0.05s)": "Surpreendentemente r√°pido, empatando com o MongoDB. **Importante:** Este resultado se deve √† nossa pequena base de dados, onde uma varredura (`ALLOW FILTERING`) seguida de filtro no cliente √© perform√°tica. Este resultado n√£o escalaria para milh√µes de registros.",
            "üèÖ Redis (~0.11s)": "O mais lento aqui. Sem um motor de busca nativo, a necessidade de buscar cada filme individualmente ap√≥s uma consulta inicial no √≠ndice gerou um alto overhead de rede."
        }
    },
    "Agrega√ß√£o (M√©dia por G√™nero)": {
        "filepath": "testes/resultados_media_genero.json",
        "descricao": "Agrega√ß√£o complexa que exige desmembrar um array e calcular uma m√©dia. Testa a capacidade anal√≠tica de cada banco.",
        "analise": {
            "üèÜ Vencedor: Neo4j (~0.01s)": "Novamente o campe√£o. Opera√ß√µes anal√≠ticas s√£o naturais para o Cypher, que resolveu a consulta de forma nativa e eficiente.",
            "ü•à MongoDB (~0.04s)": "O Aggregation Framework mostrou seu poder, realizando toda a opera√ß√£o complexa no lado do servidor com alta performance.",
            "ü•â Cassandra (~0.07s)": "Resultado decente gra√ßas √† leitura otimizada de apenas duas colunas, com o c√°lculo sendo feito no cliente. Uma solu√ß√£o vi√°vel para datasets menores.",
            "üèÖ Redis (~0.23s)": "Sofre com a falta de agrega√ß√£o no servidor, exigindo que todos os dados sejam trazidos para o cliente para serem processados, o que o torna o menos eficiente para esta tarefa."
        }
    },
    "Busca por Relacionamento": {
        "filepath": "testes/resultados_filmes_ator.json",
        "descricao": "Busca de todos os filmes de um ator espec√≠fico. Testa a efici√™ncia em percorrer relacionamentos 1-N.",
        "analise": {
            "üèÜ Vencedor: Neo4j (~0.017s)": "Este √© o seu 'habitat natural'. Percorrer um relacionamento existente √© a opera√ß√£o mais r√°pida e fundamental em um banco de grafos.",
            "ü•à Redis (~0.027s)": "A surpresa do teste! Uma performance fant√°stica gra√ßas √† **modelagem de dados inteligente**, onde criamos um √≠ndice manual (um Set) para responder a essa pergunta espec√≠fica com alt√≠ssima velocidade.",
            "ü•â MongoDB (~0.04s)": "Muito s√≥lido, utilizando o operador `$lookup` para fazer a jun√ß√£o entre as cole√ß√µes de forma otimizada no servidor.",
            "üèÖ Cassandra (~0.06s)": "Tamb√©m muito r√°pido, pois a consulta foi modelada exatamente para o seu ponto forte: buscar dados por chave de parti√ß√£o (`ator_id`)."
        }
    }
}

for nome_teste, info in testes.items():
    st.header(f"Teste de Desempenho: {nome_teste}")
    
    col1, col2 = st.columns([2, 1.5])

    with col1:
        st.markdown(f"**Cen√°rio:** {info['descricao']}")
        df_resultado, dados_brutos = carregar_e_processar_resultados(info["filepath"])
        if df_resultado is not None:
            plotar_grafico(df_resultado, f"Tempo M√©dio - {nome_teste}")

    with col2:
        st.markdown("##### üìù An√°lise dos Resultados")
        for titulo_analise, texto_analise in info["analise"].items():
            st.markdown(f"**{titulo_analise}:** {texto_analise}")

    with st.expander("Ver dados brutos do teste (JSON)"):
        st.json(dados_brutos)

    st.markdown("---")


# --- Conclus√£o Geral ---
st.header("üèÅ Conclus√µes Gerais")
st.markdown("""
A an√°lise dos quatro cen√°rios de teste demonstra de forma conclusiva que **n√£o existe um "banco de dados perfeito"** para todas as situa√ß√µes. A escolha da tecnologia deve ser guiada pela natureza da carga de trabalho principal da aplica√ß√£o.
- **Neo4j** √© a escolha superior para aplica√ß√µes onde os relacionamentos e as an√°lises de conex√µes s√£o o cora√ß√£o do neg√≥cio.
- **MongoDB** se destaca como um banco de dados de prop√≥sito geral extremamente robusto e flex√≠vel, com excelente performance tanto em escritas quanto em leituras e agrega√ß√µes complexas.
- **Redis** √© imbat√≠vel para cen√°rios de alt√≠ssima velocidade de escrita e leitura por chave ou por √≠ndices pr√©-calculados, mas n√£o √© a ferramenta ideal para consultas anal√≠ticas ad-hoc.
- **Cassandra** mostra seu valor em modelos de dados orientados a consulta e brilha em arquiteturas distribu√≠das (n√£o totalmente explorado neste TCC), onde a resili√™ncia e a escalabilidade de escrita s√£o mais importantes que a lat√™ncia em um √∫nico n√≥.
""")